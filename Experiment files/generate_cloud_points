#!/bin/python3

import csv
import argparse
import pandas as pd
from matplotlib import pyplot as plt
from matplotlib.patches import Patch
from matplotlib import ticker as ticker
palette=['#FAAB7A', '#F89087','#FBE598','#B2F4BA','#E1C9F6','#D5F5FB', '#D1BDFF']
legend_shapes=['o','P','D','X','v','^','*']
DETAILS = {
    'edp': [['short',
             'long'],
            ['eff',
             'pow']],
    'energy': [['short',
                'long'],
               ['eff',
                'pow']],
    'heuristic': [["rand",
                   "first",
                   "short",
                   "small",
                   "low_mem",
                   "low_mem_ops"],
                  ["rand",
                   "first",
                   "flops",
                   "cores",
                   "high_mem",
                   "high_mem_bw",
                   "low_pow"]]
}

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
                prog='Cloud point generator',
                description='Script to generate a cloud of points from slices',
                epilog=''
            )

    parser.add_argument('labels')
    parser.add_argument('data')
    parser.add_argument('-m', '--metric-name')
    parser.add_argument('-ul', '--upper-limit', required=False, type=int)
    parser.add_argument('-ll', '--lower-limit', required=False, type=int)

    args = parser.parse_args()
    
    data = pd.read_csv(args.data, header=None)
    scheds = pd.read_csv(args.labels, header=None)
    
    plt.figure(figsize=(12.8,7.20))
    plt.tight_layout()
    plt.subplots_adjust(bottom=0.1, left=0.1)
    plt.title(args.metric_name+" in slices")
    plt.xlabel("Slice #")
    plt.ylabel("Slice "+args.metric_name)
    #plt.yscale('log') 

    ids = {}
    
    for i in range(0, len(data.columns)):
        params = scheds.iloc[0,i].split()
        label = params[0][:4] +\
                " "+ DETAILS[params[0]][0][int(params[1])]+"â†’"+\
                DETAILS[params[0]][1][int(params[2])]

        ids[label] = palette[i]
        plt.scatter(data.index.values, data.iloc[:,i], 
                    color=palette[i], edgecolors='#000000', 
                    marker=legend_shapes[i], linewidths=0.5)
        plt.plot(data.index.values, data.iloc[:,i], color=palette[i], linewidth=0.5)

    id_handle = [Patch(facecolor=ids[i], label=i) for i in ids]
    id_legend = plt.legend(title="Scheduler", handles=id_handle, loc=1)

    plt.xticks([i for i in range(0, len(data.iloc[:,0]))])
    plt.gca().add_artist(id_legend)
    plt.savefig(args.metric_name + ".png", dpi=500)
